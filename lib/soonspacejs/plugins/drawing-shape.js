export default class{constructor(s){this.ssp=s,this.viewport=s.viewport}drawingPoint(s){return new Promise((t=>{this.clearDrawingCanvas3();const n=new this.ssp.library.Canvas3D({id:"drawingCanvas",points:[Object.assign(Object.assign({},s),{id:"drawingPoint"})]});this.ssp.manager.store.canvas3DManager.scene.add(n);const i=n.getPoint("drawingPoint"),e=s=>{if(!i)return;const t=this.ssp.viewport.getIntersects(s),n=t.length>0?t[0].point.clone():this.ssp.getPositionByOffset(s);i.setOptions({position:n})},o=n=>{if(this.ssp.signals.mouseMove.remove(e),this.ssp.signals.mouseDown.remove(o),!i)return;const a=this.ssp.viewport.getIntersects(n);this.ssp.render((()=>{a.length<=0?i.position.copy(this.ssp.getPositionByOffset(n)):i.position.copy(a[0].point.clone())})),t(Object.assign(Object.assign({},s),{position:i.position.clone()}))};this.ssp.signals.mouseMove.add(e),this.ssp.signals.mouseDown.add(o)}))}drawingLine(s){return new Promise((t=>{this.clearDrawingCanvas3();const n=new this.ssp.library.Canvas3D({id:"drawingCanvas",lines:[Object.assign(Object.assign({},s),{points:[],id:"drawingLint"})]});this.ssp.manager.store.canvas3DManager.scene.add(n);const i=n.getLine("drawingLint"),e=[],o=t=>{const n=this.ssp.viewport.getIntersects(t),o=n.length>0?n[0].point.clone():this.ssp.getPositionByOffset(t);!i||e.length<2||i.setOptions(Object.assign(Object.assign({},s),{points:[...e,o.clone().setY(o.y+1)]}))},a=t=>{const n=this.ssp.viewport.getIntersects(t),o=n.length>0?n[0].point.clone():this.ssp.getPositionByOffset(t);e.push(o.clone().setY(o.y+1)),!i||e.length<2||i.setOptions(Object.assign(Object.assign({},s),{points:e}))},g=()=>{this.ssp.signals.mouseMove.remove(o),this.ssp.signals.mouseDown.remove(a),this.ssp.signals.dblClick.remove(g),t(Object.assign(Object.assign({},s),{points:e}))};this.ssp.signals.mouseMove.add(o),this.ssp.signals.mouseDown.add(a),this.ssp.signals.dblClick.add(g)}))}drawingPolygon(s){return new Promise((t=>{this.clearDrawingCanvas3();const n=new this.ssp.library.Canvas3D({id:"drawingCanvas",polygons:[Object.assign(Object.assign({},s),{points:[],yHeight:0,id:"drawingPolygon"})]});this.ssp.manager.store.canvas3DManager.scene.add(n);const i=n.getPolygon("drawingPolygon"),e=[],o=t=>{const n=this.ssp.viewport.getIntersects(t),o=n.length>0?n[0].point.clone():this.ssp.getPositionByOffset(t);!i||e.length<3||i.setOptions(Object.assign(Object.assign({},s),{yHeight:e[0].y+1,points:[...e,o]}))},a=t=>{const n=this.ssp.viewport.getIntersects(t),o=n.length>0?n[0].point.clone():this.ssp.getPositionByOffset(t);e.push(o),!i||e.length<3||i.setOptions(Object.assign(Object.assign({},s),{yHeight:e[0].y+1,points:e}))},g=()=>{this.ssp.signals.mouseMove.remove(o),this.ssp.signals.mouseDown.remove(a),this.ssp.signals.dblClick.remove(g),t(Object.assign(Object.assign({},s),{yHeight:e[0].y+1,points:e}))};this.ssp.signals.mouseMove.add(o),this.ssp.signals.mouseDown.add(a),this.ssp.signals.dblClick.add(g)}))}clearDrawingCanvas3(){this.ssp.removeCanvas3DById("drawingCanvas")}}
