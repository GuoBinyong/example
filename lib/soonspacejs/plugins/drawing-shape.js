export default class{constructor(s){this.ssp=s,this.viewport=s.viewport}drawingPoint(s,i){return new Promise((t=>{this.clearDrawingCanvas3D();const n=new this.ssp.library.Canvas3D({id:"drawingCanvas",points:[Object.assign(Object.assign({},s),{id:"drawingPoint"})]});this.ssp.manager.store.canvas3DManager.scene.add(n);const e=n.getPoint("drawingPoint"),a=s=>{if(!e)return;const i=this.ssp.viewport.getIntersects(s),t=i.length>0?i[0].point.clone():this.ssp.getPositionByOffset(s);e.setOptions({position:t})},o=i=>{if(r(),!e)return;const n=this.ssp.viewport.getIntersects(i),a=n.length>0?n[0].point.clone():this.ssp.getPositionByOffset(i);e.setOptions({position:a}),t(Object.assign(Object.assign({},s),{position:a.clone()}))},l=()=>{var s;this.clearDrawingCanvas3D(),r(),null===(s=null==i?void 0:i.onCancel)||void 0===s||s.call(i)},c=s=>{switch(s.code){case"Escape":l()}},r=()=>{this.ssp.signals.mouseMove.remove(a),this.ssp.signals.click.remove(o),this.ssp.signals.rightClick.remove(l),this.ssp.signals.keyUp.remove(c)};this.ssp.signals.mouseMove.add(a),this.ssp.signals.click.add(o),this.ssp.signals.rightClick.add(l),this.ssp.signals.keyUp.add(c)}))}drawingLine(s,i){return new Promise((t=>{this.clearDrawingCanvas3D();const n=new this.ssp.library.Canvas3D({id:"drawingCanvas",lines:[Object.assign(Object.assign({},s),{points:[],id:"drawingLint"})]});this.ssp.manager.store.canvas3DManager.scene.add(n);const e=n.getLine("drawingLint"),a=[],o=i=>{const t=this.ssp.viewport.getIntersects(i),n=t.length>0?t[0].point.clone():this.ssp.getPositionByOffset(i);e&&e.setOptions(Object.assign(Object.assign({},s),{points:[...a,n.clone().setY(n.y+1)]}))},l=i=>{const t=this.ssp.viewport.getIntersects(i),n=t.length>0?t[0].point.clone():this.ssp.getPositionByOffset(i);a.push(n.clone().setY(n.y+1)),e&&e.setOptions(Object.assign(Object.assign({},s),{points:a}))},c=()=>{var t;a.pop(),e&&(e.setOptions(Object.assign(Object.assign({},s),{points:a})),null===(t=null==i?void 0:i.onCancelPrev)||void 0===t||t.call(i))},r=()=>{p(),t(Object.assign(Object.assign({},s),{points:a}))},g=s=>{var t;switch(s.code){case"Backspace":c();break;case"Escape":this.clearDrawingCanvas3D(),p(),null===(t=null==i?void 0:i.onCancel)||void 0===t||t.call(i)}},p=()=>{this.ssp.signals.mouseMove.remove(o),this.ssp.signals.click.remove(l),this.ssp.signals.rightClick.remove(c),this.ssp.signals.dblClick.remove(r),this.ssp.signals.keyUp.remove(g)};this.ssp.signals.mouseMove.add(o),this.ssp.signals.click.add(l),this.ssp.signals.rightClick.add(c),this.ssp.signals.dblClick.add(r),this.ssp.signals.keyUp.add(g)}))}drawingPolygon(s,i){return new Promise((t=>{this.clearDrawingCanvas3D();const n=new this.ssp.library.Canvas3D({id:"drawingCanvas",polygons:[Object.assign(Object.assign({},s),{points:[],yHeight:0,id:"drawingPolygon"})]});this.ssp.manager.store.canvas3DManager.scene.add(n);const e=n.getPolygon("drawingPolygon"),a=[],o=i=>{var t;const n=this.ssp.viewport.getIntersects(i),o=n.length>0?n[0].point.clone():this.ssp.getPositionByOffset(i);e&&e.setOptions(Object.assign(Object.assign({},s),{yHeight:((null===(t=a[0])||void 0===t?void 0:t.y)||o.y)+1,points:[...a,o]}))},l=i=>{var t;const n=this.ssp.viewport.getIntersects(i),o=n.length>0?n[0].point.clone():this.ssp.getPositionByOffset(i);a.push(o),e&&e.setOptions(Object.assign(Object.assign({},s),{yHeight:((null===(t=a[0])||void 0===t?void 0:t.y)||0)+1,points:a}))},c=()=>{var t,n;a.pop(),e&&(e.setOptions(Object.assign(Object.assign({},s),{yHeight:((null===(t=a[0])||void 0===t?void 0:t.y)||0)+1,points:a})),null===(n=null==i?void 0:i.onCancelPrev)||void 0===n||n.call(i))},r=()=>{var i;p(),t(Object.assign(Object.assign({},s),{yHeight:((null===(i=a[0])||void 0===i?void 0:i.y)||0)+1,points:a}))},g=s=>{var t;switch(s.code){case"Backspace":c();break;case"Escape":this.clearDrawingCanvas3D(),p(),null===(t=null==i?void 0:i.onCancel)||void 0===t||t.call(i)}},p=()=>{this.ssp.signals.mouseMove.remove(o),this.ssp.signals.click.remove(l),this.ssp.signals.rightClick.remove(c),this.ssp.signals.dblClick.remove(r),this.ssp.signals.keyUp.remove(g)};this.ssp.signals.mouseMove.add(o),this.ssp.signals.click.add(l),this.ssp.signals.rightClick.add(c),this.ssp.signals.dblClick.add(r),this.ssp.signals.keyUp.add(g)}))}drawingCircle(s,i){return new Promise((t=>{this.clearDrawingCanvas3D();const n=new this.ssp.library.Canvas3D({id:"drawingCanvas",circles:[Object.assign(Object.assign({},s),{id:"drawingCircle"})]});this.ssp.manager.store.canvas3DManager.scene.add(n);const e=n.getCircle("drawingCircle");let a,o=100;const l=s=>{if(!e||!a)return;const i=this.ssp.viewport.getIntersects(s),t=i.length>0?i[0].point.clone():this.ssp.getPositionByOffset(s);o=t.distanceTo(a),e.setOptions({position:a,radius:o})},c=i=>{if(!e)return;const n=this.ssp.viewport.getIntersects(i),l=n.length>0?n[0].point.clone():this.ssp.getPositionByOffset(i);a?(p(),o=l.distanceTo(this.ssp.utils.IVector3ToVector3(a)),e.setOptions({position:a,radius:o}),t(Object.assign(Object.assign({},s),{position:a,radius:o}))):a=l.clone().setY(l.y+1)},r=()=>{var s;this.clearDrawingCanvas3D(),p(),null===(s=null==i?void 0:i.onCancel)||void 0===s||s.call(i)},g=s=>{switch(s.code){case"Escape":r()}},p=()=>{this.ssp.signals.mouseMove.remove(l),this.ssp.signals.click.remove(c),this.ssp.signals.rightClick.remove(r),this.ssp.signals.keyUp.remove(g)};this.ssp.signals.mouseMove.add(l),this.ssp.signals.click.add(c),this.ssp.signals.rightClick.add(r),this.ssp.signals.keyUp.add(g)}))}clearDrawingCanvas3D(){this.ssp.removeCanvas3DById("drawingCanvas")}}
